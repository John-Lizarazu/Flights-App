{"version":3,"sources":["components/CurrencyInfo.jsx","components/DestinationInfo.jsx","components/OutboundInfo.jsx","components/InboundInfo.jsx","components/Dates.jsx","components/DateBox.jsx","components/SearchInfo.jsx","components/Routes.jsx","components/FormatRoutes.jsx","components/OriginInfo.jsx","components/ToastInfo.jsx","components/WarningMessage.jsx","components/Navbar.jsx","components/Load.jsx","App.js","index.js"],"names":["CurrencyInfo","currencies","currency","handleChange","Grid","container","spacing","className","item","form","xs","Autocomplete","freeSolo","options","map","Code","onChange","e","target","innerHTML","value","renderInput","params","TextField","label","margin","variant","DestinationInfo","countries","destinationPlace","handlePlaceChange","handlePlacesChange","useState","destinationCountry","setDestinationCountry","destinationCity","setDestinationCity","destinationPlaces","setDestinationPlaces","useEffect","a","filter","Name","length","axios","get","query","headers","data","Places","fetchPlaces","style","width","PlaceName","name","useStyles","makeStyles","theme","display","flexWrap","textField","marginLeft","marginRight","OutboundInfo","outboundDate","handleOutboundChange","outboundclass","noValidate","id","type","InputLabelProps","shrink","InboundInfo","InboundDate","handleInboundChange","inboundclass","Dates","inboundDate","marginTop","DateBox","anytime","handleCheck","FormControlLabel","control","Checkbox","checked","color","SearchInfo","handleFlightOptions","Tooltip","title","Button","onClick","marginBottom","root","minWidth","bullet","transform","fontSize","pos","Route","route","Symbol","carriers","places","cheap","routeclass","departureDateOutbound","Date","OutboundLeg","DepartureDate","departureDateInbound","InboundLeg","quoteDate","QuoteDateTime","outboundCarriers","carr","CarrierId","Number","CarrierIds","inboundCarrier","outboundPlaces","pl","PlaceId","OriginId","inboundPlaces","DestinationId","Card","CardContent","Typography","gutterBottom","QuoteId","Direct","component","Type","CardActions","size","MinPrice","formControl","selectEmpty","FormatRoutes","routes","classes","sortBy","setSortBy","curr","sort","b","sortedList","justify","FormControl","InputLabel","Select","labelId","MenuItem","sm","md","includes","OriginInfo","originPlace","originCity","setOriginCity","originCountry","setOriginCountry","originPlaces","setOriginPlaces","ToastInfo","text","severity","open","handleClose","Snackbar","autoHideDuration","onClose","Alert","WarningMessage","FlexGrow","menuButton","flexGrow","Navbar","navclass","AppBar","position","Toolbar","align","Load","textAlign","CircularProgress","thickness","App","setCountries","setCurrencies","loading","setLoading","setCurrency","Open","setOpen","toastText","setToastText","toastSeverity","setToastSeverity","setDestinationPlace","setOutboundDate","setInboundDate","setAnytime","setOriginPlace","setRoutes","setPlaces","setCarriers","originPlaceId","place","destinationPlaceId","apiUrl","Quotes","Carriers","fetchCurrencies","Currencies","fetchCountries","Countries","Container","maxWidth","date","r","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6976ce3a.chunk.js","sourcesContent":["import React from \"react\";\nimport { TextField, Grid } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nexport default function CurrencyInfo ({\n    currencies,\n    currency,\n    handleChange\n}) {\n    return(\n        //create grid so user can see where to input their data and let the API give them options of different currencies\n        <Grid container spacing={1}>\n        <Grid className=\"grid-curr\" item form=\"maincomponent\" xs>\n          <Autocomplete\n          freeSolo\n          options={currencies.map((item) => item.Code)}\n          onChange={(e) => handleChange(e.target.innerHTML)}\n          value={currency}\n          renderInput={(params)=> (\n            <TextField\n            {...params}\n            label=\"Select the currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            />\n          )}\n          />\n        </Grid>\n      </Grid>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { TextField, Grid } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport axios from \"axios\";\n\n// This component will capture the input from the user and will use the api to find and assign their destination place\nexport default function DestinationInfo({ countries,currency, destinationPlace,handlePlaceChange,handlePlacesChange,}) {\n    const [ destinationCountry, setDestinationCountry] = useState(\"\");\n    const [ destinationCity, setDestinationCity] = useState(\"\");\n    const [ destinationPlaces, setDestinationPlaces] = useState([]);\n\n    // fetching the api and assigning consts to certain data\n  useEffect(() => {\n        const fetchPlaces = async () => {\n            const country = countries.filter(\n                (item) => item.Name === destinationCountry\n            );\n                //This if statement is implied when everything is entered correctly \n            if (\n                country.length > 0 &&\n                destinationCity.length >= 2 &&\n                currency.length > 0\n            ) {\n\n                //To implement your API key, just copy and paste it in between the quotation marks\n                //DO NOT USE THE API KEY THAT IS ALREADY INPUTTED. switch it to your API key\n                const { data } = await axios.get(\n                `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/`,\n                {\n                    params: { query: destinationCity },\n                    headers: {\n                        \"x-rapidapi-key\": \"459b119038msh08814ff91df263ep16ed51jsn379cab344d53\",\n                        \"x-rapidapi-host\":\"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                    },\n                 }\n                );\n                setDestinationPlaces(data.Places);\n                handlePlacesChange(data.Places);\n         }\n        };\n        //call the function\n        fetchPlaces();\n        // eslint-disable-next-line\n    }, [destinationCity, destinationCountry, currency, countries]);\n\n  return (\n        <>  \n            <Grid container spacing={1}>\n                <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n                    <TextField\n                        style={{ width: \"100%\" }}\n                        label=\"Destination city/state\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={destinationCity}\n                        onChange={(e) => setDestinationCity(e.target.value)}\n                    />\n                </Grid>\n                <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n                    <Autocomplete\n                        freeSolo\n                        options={countries.map((item) => item.Name)}\n                        onChange={(e) => setDestinationCountry(e.target.innerHTML)}\n                        value={destinationCountry}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label=\"Destination country\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            {destinationCity.length > 0 &&\n                    destinationPlaces &&\n                    destinationPlaces.length > 0 && (\n                        <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n                                <Autocomplete\n                                    freeSolo\n                                    options={destinationPlaces.map((item) => item.PlaceName)}\n                                    onChange={(e) => handlePlaceChange(e.target.innerHTML)}\n                                    value={destinationPlace.name}\n                                    renderInput={(params) => (\n                                        <TextField\n                                            {...params}\n                                            label=\"Select destination place\"\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        />\n                                    )}\n                                />\n                        </Grid>\n                    )}\n        </>\n  );\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n//using material-ui to better format and display the date\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n}));\n//This component connects with the API and sets its value\nexport default function OutboundInfo ({\n    outboundDate, handleOutboundChange,\n}) {\n    const outboundclass = useStyles();\n\n    return (\n        <form className={outboundclass.container} noValidate>\n            <TextField\n                style={{width: \"100%\"}}\n                label=\"Outbound Date\"\n                id=\"date\"\n                type=\"date\"\n                value={outboundDate}\n                onChange={(e) => handleOutboundChange(e.target.value)}\n                className={outboundclass.textField}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n        </form>\n    )\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n//This component will gather the inbound information from the user and set the api to retrieve what the user inputs\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n}));\n\nexport default function InboundInfo ({\n    InboundDate,handleInboundChange,\n}) {\n    const inboundclass = useStyles();\n\n    return (\n        <form className={inboundclass.container} noValidate>\n            <TextField\n                style={{width: \"100%\"}}\n                id=\"date2\"\n                label=\"Inbound Date\"\n                type=\"date\"\n                value={InboundDate}\n                onChange={(e) => handleInboundChange(e.target.value)}\n                className={inboundclass.textField}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n        </form>\n    )\n}","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport OutboundInfo from \"./OutboundInfo\";\nimport InboundInfo from \"./InboundInfo\";\n\nexport default function Dates ({\n    outboundDate,handleOutboundChange,inboundDate,handleInboundChange,\n}) {\n    return (\n        //handles both outbound and inbound Info and allows the user to see where to input their data\n        <Grid container spacing={1} style={{ marginTop: \"1rem\" }}>\n            <Grid className =\"a-flex\" item form=\"maincomponent\" xs>\n                <OutboundInfo\n                    outboundDate={outboundDate}\n                    handleOutboundChange={handleOutboundChange}\n                />\n            </Grid>\n            <Grid className=\"a-flex\" item form=\"maincomponent\" xs>\n                <InboundInfo\n                    inboundDate={inboundDate}\n                    handleInboundChange={handleInboundChange}\n                />\n            </Grid>\n        </Grid>\n    );\n}","import React from \"react\";\nimport { Grid, FormControlLabel, Checkbox } from \"@material-ui/core\";\n\nexport default function DateBox ({anytime, handleCheck}) {\n    return (\n        //create a grid to allow the users to view multiple dates from anytime or focus on their desired arrival and departure date\n        <Grid container spacing={1} style={{ marginTop: \"2rem\"}}>\n            <Grid className=\"a-flex\" item form=\"maincomponent\" xs>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={anytime}\n                            onChange={handleCheck}\n                            name=\"checkedB\"\n                            color=\"default\"\n                        />\n                    }\n                    label=\"View All Dates\"\n                />\n            </Grid>\n        </Grid>\n    );\n}","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n//This component is used to search and retrieve the data the user is requesting\n//using material-ui to add features\nexport default function SearchInfo({ handleFlightOptions }) {\n    return (\n        <Tooltip title=\"Search\">\n            <Button variant=\"contained\" color=\"default\" onClick={handleFlightOptions} style={{ marginBottom: \"1.5rem\", marginTop:\"1.5rem\"}}>\n                Search\n            </Button>\n        </Tooltip>\n    )\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, Button, Typography, CardContent, CardActions} from \"@material-ui/core\";\n//using material-ui to format what will be displayed\nconst useStyles = makeStyles({\n    root: {\n        minWidth:250,\n    },\n    bullet:{\n        display:\"inline-block\",\n        margin: \" 0 2px\",\n        transform: \"scale(0.8\",\n    },\n    title: { \n        fontSize: 12,\n    },\n    pos:{\n        marginBottom:12,\n    },\n});\n//This component is used to connect with the API and set its value to what is called\n//also when the user searches for their routes it would be displayed on a card and \n//it will show their route and etc.\nexport default function Route({\n    route,Symbol,carriers,places,cheap,\n}) {\n    const routeclass=useStyles();\n\n    const departureDateOutbound = new Date(route.OutboundLeg.DepartureDate);\n    const departureDateInbound = new Date(route.InboundLeg.DepartureDate);\n    const quoteDate = new Date ( route.QuoteDateTime);\n    const outboundCarriers = carriers.filter(\n        (carr) => carr.CarrierId === Number(route.OutboundLeg.CarrierIds[0])\n    )[0];\n    const inboundCarrier = carriers.filter(\n        (carr) => carr.CarrierId ===Number(route.InboundLeg.CarrierIds[0])\n    )[0];\n    const outboundPlaces = places.filter(\n        (pl) =>pl.PlaceId ===route.OutboundLeg.OriginId\n    )[0];\n    const inboundPlaces = places.filter(\n        (pl) => pl.PlaceId === route.OutboundLeg.DestinationId\n    )[0];\n\n\n    return(\n        <Card className={routeclass.root} variant=\"outlined\">\n            <CardContent>\n                <Typography\n                    className={routeclass.title}\n                    color=\"secondary\"\n                    gutterBottom\n                >\n                    {`Route #${route.QuoteId}`}\n                </Typography>\n                <Typography className={routeclass.pos} color=\"secondary\">\n                    {`${route.Direct ? \"Direct Flight\" : \"Non-direct Flight\"}`}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    Outbound\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Origin:</strong> {\" \"}\n                    {outboundPlaces\n                    ? `${outboundPlaces.Name} ${outboundPlaces.Type}`\n                    : \"Loading..\"}\n                    <br />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Carrier: </strong>{\" \"}\n                    {outboundCarriers ? `${outboundCarriers.Name}` \n                    : \"Loading..\"}\n                    <br />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Departure date: </strong> {`${departureDateOutbound}`}\n                    <br />\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    Inbound\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Destination: </strong> {\" \"}\n                    {inboundPlaces\n                    ? `${inboundPlaces.Name} ${inboundPlaces.Type}`\n                    : \"Loading..\"}\n                    <br />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Carrier: </strong>{\" \"}\n                    {inboundCarrier ? `${inboundCarrier.Name}` : \"Loading...\"}\n                    <br />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Departure date: </strong> {`${departureDateInbound}`}\n                    <br />\n                    <br />\n                </Typography>\n                <hr />\n                <Typography variant=\"body1\" component=\"p\">\n                    <strong>Quote date: </strong> {`${quoteDate}`}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                {cheap ? (\n                    <Button\n                        size=\"small\"\n                        variant=\"contained\"\n                        >\n                        {`Route min. price: ${Symbol} ${route.MinPrice}`}\n                    </Button>\n                ) : (\n                    <Button size=\"small\">{`Route min price: ${Symbol} ${route.MinPrice}`}</Button>\n                )}\n            </CardActions>\n        </Card>\n    );\n}","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Routes from \"./Routes\";\nimport { Grid, MenuItem, FormControl, Select, InputLabel} from \"@material-ui/core\";\n\n//This component will give the routes a cetrain format to be better organized \nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin:theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n    //this is what functions the sorting and displaying the routes\nexport default function FormatRoutes({\n    routes,currency,currencies,carriers,places,\n}) {\n    const classes = useStyles();\n\n    const [sortBy, setSortBy] = useState(-1);\n    //retrieves the money symbol\n    let Symbol;\n    if (currency.length > 0) {\n        Symbol=currencies.filter((curr) => curr.Code === currency)[0].Symbol;\n    } else {\n        Symbol=\"\";\n    }\n    //This sort dropdown makes it either ascending or descending\n    if(sortBy === -1) {\n        routes.sort((a,b) => (a.QuoteId > b.QuoteId ? 1 : -1));\n    } else {\n        routes.sort ((a, b) => (a.QuoteId < b.QuoteId ? 1 : -1));\n    }\n    //Sorts the routes in ascending order\n    const sortedList = [...routes].sort((a, b) =>\n        a.QuoteId > b.QuoteId ? 1 : -1 \n    );\n\n    // To find the cheap route we would have to compare their lengths using if statements\n    let cheap;\n    if (sortedList.length >=3) {\n        cheap = [\n            sortedList[0].MinPrice,\n            sortedList[1].MinPrice,\n            sortedList[2].MinPrice\n        ];\n    } else if (sortedList.length >=2){\n        cheap=[sortedList[0].MinPrice, sortedList[1].MinPrice];\n    } else if (sortedList.length >=1) {\n        cheap= [sortedList[0].MinPrice];\n    }\n\n    return (\n        <>\n            <Grid container justify=\"center\" style={{marginBottom: \"2rem\"}}>\n                <FormControl className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-label\">Sort by</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={sortBy}\n                        onChange={(e) => setSortBy(e.target.value)}\n                    >\n                        <MenuItem value={-1}>Price low to high</MenuItem>\n                        <MenuItem value={1}>Price high to low</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid container justify=\"center\" spacing={4}>\n                {routes.map((route) => (\n                    <Grid item key={route.QuoteId} xs={12} sm={6} md={4}>\n                        <Routes\n                            route={route}\n                            Symbol={Symbol}\n                            carriers={carriers}\n                            places={places}\n                            cheap={true ? cheap.includes(route.MinPrice) : false}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        </>\n    );\n\n}","import React, { useState, useEffect } from \"react\";\nimport { TextField, Grid } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport axios from \"axios\";\n//This component captures the inputs from the user and creates their origin info\nexport default function OriginInfo ({\n    countries,\n    currency,\n    originPlace,\n    handlePlaceChange,\n    handlePlacesChange,\n  }) {\n    //State for storing user input and API data\n    const [originCity, setOriginCity] = useState(\"\");\n    const [originCountry, setOriginCountry] = useState(\"\");\n    const [originPlaces, setOriginPlaces] = useState([]);\n  \n    \n    useEffect(() => {\n     //Fetch the places bases on user input\n      const fetchPlaces = async () => {\n        // the if statement is used to ensure that the user has entered everything correctly\n        if(originCity.length >=2 && currency.length >0){\n\n          //To implement your API key, just copy and paste it in between the quotation marks\n          //DO NOT USE THE API KEY THAT IS ALREADY INPUTTED. switch it to your API key\n          const { data } = await axios.get(\n              `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/`,\n            {\n              params: { query: originCity },\n              headers: {\n                \"x-rapidapi-key\": \"459b119038msh08814ff91df263ep16ed51jsn379cab344d53\",\n                \"x-rapidapi-host\":\"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n              },\n            }\n          );\n  \n         //set states to places\n          setOriginPlaces(data.Places);\n          handlePlacesChange(data.Places);\n        }\n      };\n  \n      //call the function\n      fetchPlaces();\n      // eslint-disable-next-line\n    }, [originCity, originCountry, currency, countries]);\n  \n    return (\n      <>\n        <Grid container spacing={1}>\n          <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n            <TextField\n              style={{ width: \"100%\" }}\n              label=\"Origin city/state\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              value={originCity}\n              onChange={(e) => setOriginCity(e.target.value)}\n            />\n          </Grid>\n          <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n            <Autocomplete\n              freeSolo\n              options={countries.map((item) => item.Name)}\n              onChange={(e) => setOriginCountry(e.target.innerHTML)}\n              value={originCountry}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Origin country\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </Grid>\n        </Grid>\n        {originCity.length > 0 && originPlaces && originPlaces.length > 0 && (\n          <Grid className=\"d-flex\" item form=\"maincomponent\" xs>\n            <Autocomplete\n              freeSolo\n              options={originPlaces.map((item) => item.PlaceName)}\n              onChange={(e) => handlePlaceChange(e.target.innerHTML)}\n              value={originPlace}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Select origin place\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </Grid>\n        )}\n      </>\n    );\n  }\n  ","import React from \"react\";\nimport { Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\n//this component is used to show if the user has input or is miissing \n//input then this alert will pop up and will go away withn 12000 miliseconds\n//using material-ui for its functionality\nexport default function ToastInfo ({ text, severity, open, handleClose }) {\n    return(\n        <Snackbar open={open} autoHideDuration={12000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity={severity}>\n                {text}\n            </Alert>\n        </Snackbar>\n    );\n}","import React from \"react\";\nimport { Alert } from \"@material-ui/lab\";\n//This component is used to display a warning message, letting the user know\n//that they should input their data in order for the app to work\n//using material-ui for alert functionality\nexport default function WarningMessage() {\n    return (\n        <Alert severity=\"warning\">\n            Nothing to display at the moment! \n            Double check your information for any mistakes.\n        </Alert>\n    );\n}","import React from \"react\";\nimport { Toolbar, Typography, AppBar } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//This component is for the nav bar and displays the Title of the Web.App\n\n//using material-ui styles to adjust the nav bar\nconst useStyles = makeStyles((theme) => ({\n    root:{\n        FlexGrow:2,\n    },\n    menuButton:{\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    }\n}));\n//Setting the navbar and implementing the title\nexport default function Navbar() {\n    const navclass = useStyles();\n\n    return(\n        <AppBar position=\"static\" color=\"default\">\n            <Toolbar>\n                <Typography variant=\"h5\" align='center' className={navclass.title}>\n                    Find Flights\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}","import React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\n\n//this component will show the user a loading circle while the api retrieves their results\nexport default function Load() {\n    return(\n        <div style={{textAlign:\"center\"}}>\n            <CircularProgress size={100} thickness={1.5} />\n        </div>\n    );\n}","import React , { useState, useEffect } from \"react\";\nimport CurrencyInfo from \"./components/CurrencyInfo\";\nimport DestinationInfo from \"./components/DestinationInfo\";\nimport Dates from \"./components/Dates\";\nimport DateBox from \"./components/DateBox\";\nimport SearchInfo from \"./components/SearchInfo\";\nimport FormatRoutes from \"./components/FormatRoutes\";\nimport OriginInfo from \"./components/OriginInfo\";\nimport ToastInfo from \"./components/ToastInfo\";\nimport WarningMessage from \"./components/WarningMessage\"\nimport Navbar from \"./components/Navbar\";\nimport {Container} from \"@material-ui/core\";\nimport Load from \"./components/Load\";\nimport axios from \"axios\";\nimport \"./App.css\";\n//import all the components to app in order for everything to work properly\n//this app is then used to run the web app and API\n//main component\nexport default function App() {\n  const [ countries, setCountries] = useState([]);\n  const [ currencies, setCurrencies] = useState([]);\n  const [loading, setLoading]=useState(false);\n  const [ currency, setCurrency] = useState(\"\");\n  const [ Open, setOpen]=useState(false);\n  const [ toastText, setToastText] =useState(\"\");\n  const [ toastSeverity, setToastSeverity]=useState(\"\");\n  const [ destinationPlace, setDestinationPlace] = useState(\"\");\n  const [ destinationPlaces, setDestinationPlaces]=useState([]);\n  const [ outboundDate, setOutboundDate] = useState(\"\");\n  const [ inboundDate,setInboundDate]=useState(\"\");\n  const [ anytime, setAnytime]=useState(true);\n  const [ originPlace, setOriginPlace] = useState(\"\");\n  const [ originPlaces, setOriginPlaces] = useState([]);\n  const [ routes,setRoutes] = useState([]);\n  const [ places, setPlaces] = useState([]);\n  const [ carriers, setCarriers] = useState([]);\n  //this app function will execute when the user clicks on the search button\n  const handleFlightOptions = async () => {\n    // This if-statement checks if the user has enetered the following correctly\n    if (!currency || !originPlace || !destinationPlace) {\n      setToastText(\"Input required fields please\")\n      setToastSeverity(\"error\");\n      return setOpen(true);\n    } else{\n      // This if-statement checks if the user has selected their dates correctly\n      if (!anytime && (!inboundDate || !outboundDate )) {\n        setToastText(\n          \"Select the date from checkbox or enter the inbound date and outbound date!\"\n        );\n        setToastSeverity(\"error\");\n        return setOpen(true);\n      }\n    }\n    //uses the load component and will show that it is retrieving the data\n    setLoading(true);\n    // Grab origin place ID\n    const originPlaceId = originPlaces.filter(\n      (place) => place.PlaceName === originPlace\n    )[0].PlaceId;\n      // Grab destination place ID \n    const destinationPlaceId = destinationPlaces.filter(\n      (place) => place.PlaceName === destinationPlace\n    )[0].PlaceId;\n\n      //if user clicks to show all dates then it will show routes for anytime. If not then it will just focus on the users inbound/outbound date.\n    let apiUrl = anytime\n      ? `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/${currency}/en-US/${originPlaceId}/${destinationPlaceId}/anytime/anytime`\n      : `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/${currency}/en-US/${originPlaceId}/${destinationPlaceId}/${outboundDate}/${inboundDate}`;\n      //API request\n\n      //To implement your API key, just copy and paste it in between the quotation marks\n      //DO NOT USE THE API KEY THAT IS ALREADY INPUTTED. switch it to your API key\n    const { data } = await axios.get(apiUrl, {\n      headers: {\n        \"x-rapidapi-key\": \"459b119038msh08814ff91df263ep16ed51jsn379cab344d53\",         \n        \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n      },\n    });\n    //setting states to data from the API and finish loading\n    setRoutes (data.Quotes);\n    setCarriers(data.Carriers);\n    setPlaces(data.Places);\n    setLoading(false);\n    //Shows the user how many flights were found using toast\n    setToastText(`Successfully fetched ${data.Quotes.length} routes!`);\n    setToastSeverity(\"success\");\n    setOpen(data.Quotes.length > 0 && true);\n  };\n  //if everything is working fine then useEffect will work\n\n      //To implement your API key, just copy and paste it in between the quotation marks\n      //DO NOT USE THE API KEY THAT IS ALREADY INPUTTED. switch it to your API key\n  useEffect(() => {\n    const options = {\n      headers: {\n        \"x-rapidapi-key\":\"459b119038msh08814ff91df263ep16ed51jsn379cab344d53\",\n        \"x-rapidapi-host\":\"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n        },\n    };\n    \n    // Get the currencies from the API \n     const fetchCurrencies = async () => {\n       const { data } = await axios.get(\n        \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\",options\n    \n      );\n        //set the currencies\n       setCurrencies(data.Currencies);\n     };\n     //Grab all country options from the API\n     const fetchCountries = async () => {\n       const { data } = await axios.get(\n           \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/countries/en-US\",options\n         );\n         //set the countries\n         setCountries(data.Countries);\n     };\n        //Run functions\n        fetchCurrencies();\n       fetchCountries();\n   }, []);\n  \n  return(\n    <>\n      <Navbar />\n      <Container maxWidth=\"md\">\n        <CurrencyInfo\n          currency={currency}\n          currencies={currencies}\n          handleChange={(curr) => setCurrency(curr)}\n        />\n        <DestinationInfo \n          currency={currency} \n          countries = {countries}\n          destinationPlace={destinationPlace}\n          handlePlaceChange={(place) => setDestinationPlace(place)}\n          handlePlacesChange={(places) => setDestinationPlaces(places)}\n        />\n        <OriginInfo\n          currency={currency}\n          countries={countries}\n          originPlace={originPlace}\n          handlePlaceChange={(place)=>setOriginPlace(place)}\n          handlePlacesChange={(places)=>setOriginPlaces(places)}\n        />\n        <Dates\n          outboundDate={outboundDate}\n          handleOutboundChange={(date) => setOutboundDate(date)}\n          inboundDate={inboundDate}\n          handleInboundChange={(date) => setInboundDate(date)}\n        />\n        <DateBox\n          anytime={anytime}\n          handleCheck={(e) => setAnytime(e.target.checked)}\n        />\n        <SearchInfo handleFlightOptions={handleFlightOptions} />\n        {loading ? (\n          <Load />\n        ) : routes.length >0 ? (\n          <FormatRoutes\n            routes={routes}\n            currency={currency}\n            currencies={currencies}\n            carriers={carriers}\n            places={places}\n          />\n        ) : (\n          <WarningMessage />\n        )}\n        <ToastInfo\n          severity={toastSeverity}\n          text={toastText}\n          open={Open}\n          handleClose={(e,r) => {\n            if(r === \"clickaway\"){\n              return;\n            }\n            setOpen(false);\n          }}\n        />\n      </Container>\n    </>\n  );\n\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./App.css\";\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}